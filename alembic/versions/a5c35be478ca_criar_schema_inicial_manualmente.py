"""criar_schema_inicial_manualmente

Revision ID: a5c35be478ca
Revises: 
Create Date: 2025-05-30 11:23:01.922836

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# Definir os tipos ENUM do PostgreSQL com VALORES MINÚSCULOS
genero_enum_type = postgresql.ENUM(
    'masculino', 'feminino', 'outro', 'prefiro_nao_dizer', 
    name='generoenum', create_type=False
)
nivel_atividade_enum_type = postgresql.ENUM(
    'sedentario', 'levemente_ativo', 'moderadamente_ativo', 'muito_ativo', 'extremamente_ativo', 
    name='nivelatividadeenum', create_type=False
)
objetivo_enum_type = postgresql.ENUM(
    'perder_peso', 'manter_peso', 'ganhar_massa', 
    name='objetivoenum', create_type=False
)

# revision identifiers, used by Alembic.
revision: str = 'a5c35be478ca'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    print("DEBUG MIGRATION: Executando upgrade() COMPLETO com ENUMs minúsculos.")
    # ### Criar os tipos ENUM primeiro ###
    genero_enum_type.create(op.get_bind(), checkfirst=True)
    nivel_atividade_enum_type.create(op.get_bind(), checkfirst=True)
    objetivo_enum_type.create(op.get_bind(), checkfirst=True)
    print("DEBUG MIGRATION: Tipos ENUM criados (ou já existentes).")

    # ### Criar tabela usuarios ###
    op.create_table('usuarios',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('nome', sa.String(), nullable=True, index=True),
        sa.Column('email', sa.String(), nullable=False, unique=True, index=True),
        sa.Column('hashed_password', sa.String(), nullable=False),
        sa.Column('is_active', sa.Boolean(), nullable=True, server_default=sa.text('true')),
        sa.Column('peso_kg', sa.Float(), nullable=True),
        sa.Column('altura_cm', sa.Integer(), nullable=True),
        sa.Column('data_nascimento', sa.Date(), nullable=True),
        sa.Column('genero', genero_enum_type, nullable=True),
        sa.Column('nivel_atividade', nivel_atividade_enum_type, nullable=True),
        sa.Column('objetivo', objetivo_enum_type, nullable=True),
        sa.Column('restricoes_alimentares', sa.String(), nullable=True),
        sa.Column('observacoes', sa.String(), nullable=True),
        sa.PrimaryKeyConstraint('id')
    )
    print("DEBUG MIGRATION: Tabela 'usuarios' criada.")

    op.create_table('alimentos',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('nome', sa.String(), nullable=False, index=True),
        sa.Column('marca', sa.String(), nullable=True),
        sa.Column('porcao_gramas', sa.Float(), nullable=False),
        sa.Column('calorias_por_porcao', sa.Float(), nullable=False),
        sa.Column('carboidratos_g', sa.Float(), nullable=True),
        sa.Column('proteinas_g', sa.Float(), nullable=True),
        sa.Column('gorduras_g', sa.Float(), nullable=True),
        sa.PrimaryKeyConstraint('id')
    )
    print("DEBUG MIGRATION: Tabela 'alimentos' criada.")

    op.create_table('refeicoes',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('nome', sa.String(), nullable=False, index=True),
        sa.Column('horario', sa.String(), nullable=True),
        sa.Column('usuario_id', sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(['usuario_id'], ['usuarios.id'], name=op.f('fk_refeicoes_usuario_id_usuarios')),
        sa.PrimaryKeyConstraint('id')
    )
    print("DEBUG MIGRATION: Tabela 'refeicoes' criada.")

    op.create_table('itens_refeicao',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('refeicao_id', sa.Integer(), nullable=False),
        sa.Column('alimento_id', sa.Integer(), nullable=False),
        sa.Column('quantidade', sa.Float(), nullable=False),
        sa.ForeignKeyConstraint(['alimento_id'], ['alimentos.id'], name=op.f('fk_itens_refeicao_alimento_id_alimentos')),
        sa.ForeignKeyConstraint(['refeicao_id'], ['refeicoes.id'], name=op.f('fk_itens_refeicao_refeicao_id_refeicoes')),
        sa.PrimaryKeyConstraint('id')
    )
    print("DEBUG MIGRATION: Tabela 'itens_refeicao' criada.")
    # ### end Alembic commands ###


def downgrade() -> None:
    print("DEBUG MIGRATION: Executando downgrade() COMPLETO.")
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('itens_refeicao')
    op.drop_table('refeicoes')
    op.drop_table('alimentos')
    op.drop_table('usuarios')
    
    # Drop dos tipos ENUM
    objetivo_enum_type.drop(op.get_bind(), checkfirst=True)
    nivel_atividade_enum_type.drop(op.get_bind(), checkfirst=True)
    genero_enum_type.drop(op.get_bind(), checkfirst=True)
    print("DEBUG MIGRATION: Downgrade COMPLETO concluído.")
    # ### end Alembic commands ###
